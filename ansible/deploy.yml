---
# Ansible tasks to deploy projects to AWS ECS, managed by CloudReactor
- name: "AWS ECS CloudReactor Deployer"
  hosts: 127.0.0.1
  connection: local
  vars:
    project_env_metadata: "{{ project_metadata | combine(env_metadata | default({}), recursive=true) }}"
    project_name: "{{ project_env_metadata.name }}"
    project_version_number: "{{ project_env_metadata.version_number }}"
    project_version_text: "{{ project_env_metadata.version_text }}"
    source_repository_url: "{{ project_env_metadata.source_repository_url }}"
    task_version_signature: "{{ lookup('env','CLOUDREACTOR_TASK_VERSION_SIGNATURE') | default(ansible_date_time.iso8601_basic, true) }}"

    work_dir: "{{ lookup('env', 'WORK_DIR') | default('.', true) }}"
    docker_context_dir: "{{ lookup('env', 'CONTAINER_DOCKER_CONTEXT_DIR') | default(work_dir, true) }}"
    deploy_config_dir: "{{ work_dir }}/deploy_config"
    config_filename_stem: "{{ lookup('env', 'CONFIG_FILENAME_STEM') | default(env, true) }}"
    build_options: "{{ project_build_options | default({}) | combine(env_build_options | default({}), recursive=true) }}"
    dockerfile_path: "{{ lookup('env', 'DOCKERFILE_PATH') | default(build_options.dockerfile_path | default(docker_context_dir + '/Dockerfile', true), true) }}"
    docker_common_general_options: "{{ lookup('env', 'DOCKER_COMMON_GENERAL_OPTIONS') | default(build_options.docker_common_general_options | default(''), true) }}"
    docker_build_general_options: "{{ lookup('env', 'DOCKER_BUILD_GENERAL_OPTIONS') | default(build_options.docker_build_general_options | default(''), true) }}"
    extra_docker_build_args: "{{ lookup('env', 'EXTRA_DOCKER_BUILD_ARGS') | default(build_options.extra_docker_build_args | default(''), true) }}"
    docker_tag_general_options: "{{ lookup('env', 'DOCKER_TAG_GENERAL_OPTIONS') | default(build_options.docker_tag_general_options | default(''), true) }}"
    extra_docker_tag_args: "{{ lookup('env', 'EXTRA_DOCKER_TAG_ARGS') | default(build_options.extra_docker_tag_args | default(''), true) }}"
    docker_push_general_options: "{{ lookup('env', 'DOCKER_PUSH_GENERAL_OPTIONS') | default(build_options.docker_push_general_options | default(''), true) }}"
    extra_docker_push_args: "{{ lookup('env', 'EXTRA_DOCKER_PUSH_ARGS') | default(build_options.extra_docker_push_args | default(''), true) }}"

    project_env_deployment: "{{ project_deployment | combine(env_deployment | default({}), recursive=true) }}"
    task_runtime_env_secret_path: "{{ project_env_deployment.task_runtime_env_secret_path | default('__unset__') }}"
    store_task_runtime_env_in_secrets_manager: "{{ (project_env_deployment.store_task_runtime_env_in_secrets_manager | default(false)) and (task_runtime_env_secret_path != '__unset__') }}"
    container_registry_credentials_secret_path: "{{ project_env_deployment.container_registry_credentials_secret_path | default('__unset__') }}"
    store_container_registry_credentials_in_secrets_manager: "{{ project_env_deployment.store_container_registry_credentials_in_secrets_manager | default(false, true) }}"

    resolved_cloudreactor: "{{ project_cloudreactor | default({}) | combine(env_cloudreactor | default({}), recursive=true) }}"
    cloudreactor_enabled: "{{ resolved_cloudreactor.enabled | default(true) }}"
    cloudreactor_api_base_url: "{{ lookup('env', 'CLOUDREACTOR_API_BASE_URL') | default(resolved_cloudreactor.api_base_url | default('https://api.cloudreactor.io', true), true) }}"
    cloudreactor_deploy_api_key: "{{ lookup('env', 'CLOUDREACTOR_DEPLOY_API_KEY') | default(resolved_cloudreactor.deploy_api_key, true) }}"

    run_environment_name: "{{ resolved_cloudreactor.run_environment | default(env) }}"
    run_environment: "{{ run_environment_result.json.results[0] }}"
    run_environment_ecs: "{{ (run_environment.execution_method_settings['AWS ECS']['__default__']['settings'] | default({})) if cloudreactor_enabled else {} }}"
    run_environment_aws: "{{ (run_environment.infrastructure_settings['AWS']['__default__']['settings'] | default({})) if cloudreactor_enabled else {} }}"

    project_env_aws: "{{ (project_aws | default({})) | combine(env_aws | default({}), recursive=true) }}"
    task_indep_aws: "{{ run_environment_aws | combine(project_env_aws, recursive=true) }}"
    aws_region: "{{ task_indep_aws.region | default(lookup('env', 'AWS_DEFAULT_REGION') | default(lookup('env', 'AWS_REGION'), true), true) }}"
    project_env_ecs: "{{ (project_ecs | default({})) | combine(env_ecs | default({}), recursive=true) }}"
    task_indep_ecs: "{{ run_environment_ecs | combine(project_env_ecs, recursive=true) }}"

    ecr_aws_account_id: "{{ build_options.ecr_aws_account_id | default(task_indep_aws.account_id) }}"
    ecr_aws_region: "{{ build_options.ecr_aws_region | default(aws_region) }}"
    container_registry_host: "{{ build_options.container_registry_host | default(ecr_aws_account_id + '.dkr.ecr.' + ecr_aws_region + '.amazonaws.com') }}"
    container_repository: "{{ build_options.container_repository | default(project_name) }}"
    # # Setting this causes "Cannot modify repository encryption type" error
    # default_ecr_encryption_configuration:
    #  encryption_type: AES256
    # ecr_encryption_configuration: "{{ build_options.ecr_encryption_configuration | default(default_ecr_encryption_configuration) }}"

    use_private_ecr: "{{ container_registry_host is match('\\d+\\.dkr\\.ecr\\.[a-z0-9\\-]+\\.amazonaws\\.com') }}"
    use_public_ecr: "{{ container_registry_host == 'public.ecr.aws' }}"
    container_registry_username: "{{ lookup('env', 'CONTAINER_REGISTRY_USERNAME') | \
      default(('AWS' if (use_private_ecr or use_public_ecr) else build_options.container_registry_username) if requires_build else '__unset__', true) }}"
    container_registry_password: "{{ lookup('env', 'CONTAINER_REGISTRY_PASSWORD') | default(build_options.container_registry_password, true) | default('__unset__', true) }}"

    container_registry_password_command: "{{
      (
        ('aws ecr get-login-password --region ' + (ecr_aws_region | quote))
        if use_private_ecr
        else
        (
          ('aws ecr-public get-login-password --region ' + (ecr_aws_region | quote))
          if use_public_ecr
          else
          ('echo ' + (container_registry_password | quote))
        )
      )
      if requires_build
      else none
    }}"

    container_registry_pull_credentials:
      username: "{{ lookup('env', 'CONTAINER_REGISTRY_PULL_USERNAME') | default(project_env_deployment.container_registry_pull_username | default(container_registry_username), true) }}"
      password: "{{ lookup('env', 'CONTAINER_REGISTRY_PULL_PASSWORD') | default(project_env_deployment.container_registry_pull_password | default(container_registry_password), true) }}"

    source_docker_image_tag: "{{ build_options.docker_image_tag | default(env + '_' + task_version_signature) | regex_replace('[^a-zA-Z0-9_.-]+', '_') | truncate(128, False, '', 0) }}"
    source_docker_image_name_without_tag: "{{ build_options.source_docker_image_name_without_tag | default(project_name) }}"
    source_docker_image_name: "{{ source_docker_image_name_without_tag }}:{{source_docker_image_tag}}"
    target_docker_image_tag: "{{ build_options.target_docker_image_tag | default(source_docker_image_tag) }}"
    target_docker_image_name_without_tag: "{{ build_options.target_docker_image_name_without_tag | default(container_registry_host + '/' + container_repository) }}"
    target_docker_image_name: "{{ target_docker_image_name_without_tag }}:{{target_docker_image_tag}}"

    task_indep_task_infra_dict:
      ecs: "{{ task_indep_ecs }}"
      aws: "{{ task_indep_aws }}"

    # project_task_config (defined in common.yml) contains common, non-secret
    # Task settings for all deployment environments, unless overridden.
    project_task_config_safe: "{{ project_task_config | default({}) }}"

    # env_to_task_config (defined in common.yml) is a mapping from
    # deployment environment name to non-secret Task settings common to all
    # Tasks, unless overridden.
    env_to_task_config_safe: "{{ env_to_task_config | default({}) }}"
    env_default_task_config: "{{ env_to_task_config_safe[env] | default({}) }}"

    # env_task_config comes from [env].yml.
    # It contains secret Task settings for all Tasks in the deployment
    # environment, unless overridden.
    env_task_config_safe: "{{ env_task_config | default({}) }}"

    task_indep_task_config: "{{ task_indep_task_infra_dict | combine(project_task_config_safe, env_default_task_config, env_task_config_safe, recursive=true) }}"

    # env_to_task_name_to_config (defined in common.yml) is mapping from
    # deployment environment name to another mapping from Task name to
    # non-secret Task settings.
    env_to_task_name_to_config_safe: "{{ env_to_task_name_to_config | default({}) }}"
    env_task_name_to_config: "{{ env_to_task_name_to_config_safe[env] | default({}) }}"

    indep_task_config_dict_entry:
      value: "{{ task_indep_task_config }}"

    # project_task_name_to_config (defined in common.yml) is a mapping from Task name
    # to non-secret Task settings common to all deployment environments,
    # unless overridden.
    project_env_task_name_to_config_no_indep: "{{ project_task_name_to_config | default({}) | combine(env_task_name_to_config, recursive=true) }}"
    resolved_task_name_to_config: "{{ project_env_task_name_to_config_no_indep | dict2items | map('combine', indep_task_config_dict_entry, recursive=true) | items2dict | combine(project_env_task_name_to_config_no_indep, recursive=true) }}"
    resolved_task_names: "{{ (resolved_task_name_to_config | dict2items | json_query('[?((value.deployed==undefined) || (to_string(value.deployed)==to_string(`true`)) || (to_string(value.removed_from_task_manager)==to_string(`true`)))].key')) if (task_names | upper) == 'ALL' else task_names.split(',') }}"
    resolved_sync_required_task_name_to_config_query: "{{ '[?(key==`' +  resolved_task_names | join('`)||(key==`') + '`)]' }}"
    resolved_sync_required_task_name_to_config: "{{ resolved_task_name_to_config | dict2items | json_query(resolved_sync_required_task_name_to_config_query) | items2dict }}"
    requires_build: "{{ (resolved_sync_required_task_name_to_config | dict2items | json_query('[?(((value.ecs.task_definition_arn==undefined)||(value.ecs.task_definition_arn==`__unset__`))&&((value.ecs.docker_image_name==undefined)||(value.ecs.docker_image_name==`__unset__`))&&(to_string(value.removed_from_task_manager)!=to_string(`true`)))]')) | length > 0 }}"

    build_task_execution_uuid: "{{ lookup('env', 'PROC_WRAPPER_TASK_EXECUTION_UUID') | default('__unset__', true) }}"
    deployment_task_execution_uuid: "{{ lookup('env', 'PROC_WRAPPER_TASK_EXECUTION_UUID') | default('__unset__', true) }}"

    # Use this when referencing the Task name, possibly before the Task name is set, as in custom top-level variables.
    # Otherwise, the variables that you declare that reference "item" or "task_name" may end up being undefined.
    task_name_safe: "{{ item | default('_TASK_NAME_PLACEHOLDER_') }}"
  tasks:
  - name: Set project-level variables
    include_vars: "{{deploy_config_dir}}/vars/common.yml"
  - name: Ensure schema version is present
    fail:
      msg: schema_version not found at the top level of common.yml, please set to 4
    when: schema_version is not defined
  - name: Ensure schema version is compatible
    fail:
      msg:
        - schema_version {{ schema_version }} is not compatible with this version of the deployer.
        - The only acceptable value this deployer version accepts is 4.
    when: (schema_version != 4)
  - name: Set deployment environment-specific variables
    include_vars: "{{deploy_config_dir}}/vars/{{config_filename_stem}}.yml"

  - name: Check legacy <4.0 properties
    fail:
      msg:
        - "A legacy property was detected. Starting in version 4.0 of the
        deployer, the following property names were renamed:"
        - ""
        - project_name => project_metadata.name
        - project_version_text => project_metadata.version_text
        - project_url => project_metadata.source_repository_url
        - "use_task_role => (use the task_role_arn property under an 'ecs' configuration, such as 'env_ecs')"
        - "use_secrets_manager => (use the 'task_runtime_env_secret_path' and 'store_task_runtime_env_in_secrets_manager' property under a 'deployment' configuration, such as 'env_deployment')"
        - "default_build_options => project_build_options"
        - "default_cloudreactor => project_cloudreactor"
        - "default_task_config => project_task_config"
        - "task_name_to_config => project_task_name_to_config"
        - "env_to_default_task_config  => env_to_task_config"
        - "cloudreactor => env_cloudreactor"
        - "default_env_task_config => env_task_config"
        - "task_name_to_env_config => env_task_name_to_config"
    when: (project_metadata.name is not defined) or
      (project_url is defined) or
      (use_task_role is defined) or (use_secrets_manager is defined) or
      (default_build_options is defined) or
      (default_cloudreactor is defined) or (default_task_config is defined) or
      (task_name_to_config is defined) or
      (env_to_default_task_config is defined) or (cloudreactor is defined) or
      (default_env_task_config is defined) or
      (task_name_to_env_config is defined)

  - name: Get configuration from CloudReactor Run Environment
    uri:
      url: "{{ cloudreactor_api_base_url }}/api/v1/run_environments/?name={{ run_environment_name | urlencode }}"
      headers:
        Accept: "application/json"
        Authorization: "Bearer {{cloudreactor_deploy_api_key}}"
      return_content: True
    register: run_environment_result
    when: cloudreactor_enabled
    tags:
      - upload
      - sync_tasks

  - name: Ensure Runtime Environment is found
    assert:
      that:
        - run_environment_result.json.count == 1
      fail_msg: "Run Environment '{{ run_environment_name }}' not found in CloudReactor, please create it."
    when: cloudreactor_enabled
    tags:
      - upload
      - sync_tasks

  - name: Output Runtime Environment
    debug:
      msg: "Runtime Environment is {{ run_environment }}"
      verbosity: 1
    when: cloudreactor_enabled
    tags:
      - sync_tasks

  - name: Output Task Independent AWS settings
    debug:
      msg: "AWS settings: {{ task_indep_aws }}"
      verbosity: 1
    tags:
      - upload
      - sync_tasks

  - name: Output Task Independent ECS settings
    debug:
      msg: "ECS settings: {{ task_indep_ecs }}"
      verbosity: 1
    tags:
      - upload
      - sync_tasks

  - name: Check if pre-build hook file exists
    stat:
      path: "{{deploy_config_dir}}/hooks/pre_build.yml"
    register: pre_build_hook_file_stat
    tags:
      - build

  # Hook to perform steps before building the Docker image
  - name: Pre-build hook
    include_tasks: "{{deploy_config_dir}}/hooks/pre_build.yml"
    when: pre_build_hook_file_stat.stat.exists
    tags:
      - build

  - debug:
      msg:
        - "project_task_name_to_config = {{ project_task_name_to_config }}"
        - "env_task_name_to_config = {{ env_task_name_to_config }}"
        - "project_task_config_safe = {{ project_task_config_safe }}"
        - "env_default_task_config = {{ env_default_task_config }}"
        - "env_task_config_safe = {{ env_task_config_safe }}"
        - "task_indep_task_config = {{ task_indep_task_config }}"

        - "resolved_task_name_to_config = {{ resolved_task_name_to_config }}"
      verbosity: 2

  - debug: msg="Task version signature = {{task_version_signature}}, resolved task names = {{resolved_task_names}}, requires_build = {{requires_build}}"
    tags:
      - version
      - build
      - upload
      - sync_tasks

  - name: Create output directory
    file:
      path: "build/{{env}}"
      state: directory
    when: requires_build
    tags:
      - build

  - name: Output Docker build options
    debug:
      msg: "Docker build options: {{build_options}}"
      verbosity: 1
    when: requires_build
    tags:
      - build

  - name: Output Docker build command
    debug:
      msg: "Docker build command: 'docker {{docker_common_general_options}} {{docker_build_general_options}} build -f {{dockerfile_path}} --build-arg env={{env}} {{extra_docker_build_args}} -t {{source_docker_image_name}} .'"
      verbosity: 1
    when: requires_build
    tags:
      - build

  - name: Build Docker image
    command: "docker {{docker_common_general_options}} {{docker_build_general_options}} build -f {{dockerfile_path}} --build-arg env={{env}} {{extra_docker_build_args}} -t {{source_docker_image_name}} ."
    args:
      chdir: "{{ docker_context_dir }}"
    when: requires_build
    tags:
      - build

  - name: Create private ECR repository
    community.aws.ecs_ecr:
      registry_id: "{{ ecr_aws_account_id }}"
      name: "{{container_repository}}"
      region: "{{ecr_aws_region}}"
      # Setting this causes "Cannot modify repository encryption type" error
      # encryption_configuration: "{{ ecr_encryption_configuration }}"
    when: requires_build and use_private_ecr
    tags:
      - upload
      - create_ecr_repo

  - name: Tag Docker image
    command: "docker {{docker_common_general_options}} {{docker_tag_general_options}} tag {{source_docker_image_name}} {{target_docker_image_name}} {{extra_docker_tag_args}}"
    when: requires_build
    tags:
      - upload

  - name: Login to container repository
    shell: "{{ container_registry_password_command }} | docker {{docker_common_general_options}} login --username {{ container_registry_username | quote }} --password-stdin {{container_registry_host}}"
    no_log: true
    when: requires_build
    tags:
      - upload

  - name: Push Docker image
    command: "docker {{docker_common_general_options}} {{docker_push_general_options}} push {{target_docker_image_name}} {{extra_docker_push_args}}"
    when: requires_build
    tags:
      - upload

  - name: Upload container registry credentials to AWS Secrets Manager
    community.aws.aws_secret:
      name: "{{ container_registry_credentials_secret_path }}"
      state: present
      json_secret: "{{ container_registry_pull_credentials | to_json }}"
      region: "{{ aws_region }}"
      tags:
        Environment: "{{ env }}"
    when: store_container_registry_credentials_in_secrets_manager and (container_registry_credentials_secret_path != '__unset')

  # Uploads your locally encrypted .env file to Secrets Manager each time you
  # deploy. This does not support secret paths that start with "arn:".
  - name: Upload .env file to AWS Secrets Manager
    community.aws.aws_secret:
      name: "{{ task_runtime_env_secret_path }}"
      state: present
      secret_type: 'string'
      secret: "{{ lookup('file', deploy_config_dir + '/env/.env.' + config_filename_stem) }}"
      region: "{{ aws_region }}"
      tags:
        Environment: "{{ env }}"
    register: create_dotenv_secret_result
    when: store_task_runtime_env_in_secrets_manager

  - debug:
      msg: "Secret: {{create_dotenv_secret_result}}"
    when: store_task_runtime_env_in_secrets_manager

  - name: Check if post-build hook file exists
    stat:
      path: "{{deploy_config_dir}}/hooks/post_build.yml"
    register: post_build_hook_file_stat
    tags:
      - build

    # Hook to perform steps before after building the Docker image,
    # but before creating the Task in ECS and CloudReactor
  - name: Post-build hook
    include_tasks: "{{deploy_config_dir}}/hooks/post_build.yml"
    when: post_build_hook_file_stat.stat.exists
    tags:
      - build

  - include_tasks: sync_task.yml
    with_items: "{{ resolved_task_names }}"
    tags:
      - sync_tasks

  - name: Logout of container repository
    command: "docker {{docker_common_general_options}} logout {{container_registry_host}}"
    when: requires_build
    tags:
      - upload
