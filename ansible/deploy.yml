---
# Ansible tasks to deploy projects to AWS ECS, managed by CloudReactor
- name: "{{project_name}}"
  hosts: 127.0.0.1
  connection: local
  vars_files:
    - "{{deploy_config_dir}}/vars/common.yml"
    - "{{deploy_config_dir}}/vars/{{config_filename_stem}}.yml"
  vars:
    task_version_signature: "{{ lookup('env','CLOUDREACTOR_TASK_VERSION_SIGNATURE') | default(ansible_date_time.iso8601_basic, true) }}"
    work_dir: "{{ lookup('env', 'WORK_DIR') | default('.', true) }}"
    docker_context_dir: "{{ lookup('env', 'CONTAINER_DOCKER_CONTEXT_DIR') | default(work_dir, true) }}"
    deploy_config_dir: "{{ work_dir }}/deploy_config"
    config_filename_stem: "{{ lookup('env', 'CONFIG_FILENAME_STEM') | default(env, true) }}"
    build_options: "{{ project_build_options | default({}) | combine(env_build_options | default({}), recursive=True) }}"
    dockerfile_path: "{{ lookup('env', 'DOCKERFILE_PATH') | default(build_options.dockerfile_path | default(docker_context_dir + '/Dockerfile', true), true) }}"
    docker_common_general_options: "{{ lookup('env', 'DOCKER_COMMON_GENERAL_OPTIONS') | default(build_options.docker_common_general_options | default(''), true) }}"
    docker_build_general_options: "{{ lookup('env', 'DOCKER_BUILD_GENERAL_OPTIONS') | default(build_options.docker_build_general_options | default(''), true) }}"
    extra_docker_build_args: "{{ lookup('env', 'EXTRA_DOCKER_BUILD_ARGS') | default(build_options.extra_docker_build_args | default(''), true) }}"
    docker_tag_general_options: "{{ lookup('env', 'DOCKER_TAG_GENERAL_OPTIONS') | default(build_options.docker_tag_general_options | default(''), true) }}"
    extra_docker_tag_args: "{{ lookup('env', 'EXTRA_DOCKER_TAG_ARGS') | default(build_options.extra_docker_tag_args | default(''), true) }}"
    docker_push_general_options: "{{ lookup('env', 'DOCKER_PUSH_GENERAL_OPTIONS') | default(build_options.docker_push_general_options | default(''), true) }}"
    extra_docker_push_args: "{{ lookup('env', 'EXTRA_DOCKER_PUSH_ARGS') | default(build_options.extra_docker_push_args | default(''), true) }}"

    resolved_cloudreactor: "{{ project_cloudreactor | default({}) | combine(env_cloudreactor | default({}), recursive=True) }}"
    cloudreactor_enabled: "{{ resolved_cloudreactor.enabled | default(true) }}"
    cloudreactor_api_base_url: "{{ lookup('env', 'CLOUDREACTOR_API_BASE_URL') | default(resolved_cloudreactor.api_base_url | default('https://api.cloudreactor.io', true), true) }}"
    cloudreactor_deploy_api_key: "{{ lookup('env', 'CLOUDREACTOR_DEPLOY_API_KEY') | default(resolved_cloudreactor.deploy_api_key, true) }}"

    run_environment_name: "{{ resolved_cloudreactor.run_environment | default(env) }}"
    run_environment: "{{ run_environment_result.json.results[0] }}"
    run_environment_ecs: "{{ (run_environment.execution_method_settings['AWS ECS']['__default__']['settings'] | default({})) if cloudreactor_enabled else {} }}"
    run_environment_aws: "{{ (run_environment.infrastructure_settings['AWS']['__default__']['settings'] | default({})) if cloudreactor_enabled else {} }}"

    project_env_aws: "{{ (project_aws | default({})) | combine(env_aws | default({}), recursive=True) }}"
    task_indep_aws: "{{ run_environment_aws | combine(project_env_aws, recursive=True) }}"
    aws_region: "{{ task_indep_aws.region | default(lookup('env', 'AWS_DEFAULT_REGION')) }}"
    container_registry_host: "{{ task_indep_aws.account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"

    project_env_ecs: "{{ (project_ecs | default({})) | combine(env_ecs | default({}), recursive=True) }}"
    task_indep_ecs: "{{ run_environment_ecs | combine(project_env_ecs, recursive=True) }}"

    container_repository: "{{ build_options.container_repository | default(project_name) }}"
    source_docker_image_tag: "{{ build_options.docker_image_tag | default(env + '_' + task_version_signature) }}"
    source_docker_image_name_without_tag: "{{ build_options.source_docker_image_name_without_tag | default(project_name) }}"
    source_docker_image_name: "{{ source_docker_image_name_without_tag }}:{{source_docker_image_tag}}"
    target_docker_image_tag: "{{ build_options.target_docker_image_tag | default(source_docker_image_tag) }}"
    target_docker_image_name_without_tag: "{{ build_options.target_docker_image_name_without_tag | default(container_registry_host + '/' + container_repository) }}"
    target_docker_image_name: "{{ target_docker_image_name_without_tag }}:{{target_docker_image_tag}}"

    task_indep_task_config: "{{ project_task_config | default({}) | combine(env_default_task_config, env_task_config_safe, recursive=True) }}"

    # project_task_config (defined in common.yml) contains common, non-secret
    # Task settings for all deployment environments, unless overridden.
    #
    # env_to_default_task_config (defined in common.yml) is a mapping from
    # deployment environment name to non-secret Task settings common to all
    # Tasks, unless overridden.
    env_to_default_task_config_safe: "{{ env_to_default_task_config | default({}) }}"
    env_default_task_config: "{{ env_to_default_task_config_safe[env] | default({}) }}"

    # env_task_config comes from [env].yml.
    # It contains secret Task settings for all Tasks in the deployment
    # environment, unless overridden.
    env_task_config_safe: "{{ env_task_config | default({}) }}"

    # env_to_task_name_to_config (defined in common.yml) is a mapping from
    # deployment environment name to another mapping from Task name to
    # non-secret Task settings.
    env_to_task_name_to_config_safe: "{{ env_to_task_name_to_config | default({}) }}"
    env_task_name_to_config: "{{ env_to_task_name_to_config_safe[env] | default({}) }}"

    # task_name_to_env_config (defined in [env].yml) is a mapping from Task name
    # to possibly secret Task settings specific to the deployment environment.
    task_name_to_env_config_safe: "{{ task_name_to_env_config | default({}) }}"

    # task_name_to_config (defined in common.yml)  is a mapping from Task name
    # to non-secret Task settings common to all deployment environments,
    # unless overridden.
    resolved_task_name_to_config: "{{ task_name_to_config | combine(env_task_name_to_config, task_name_to_env_config_safe, recursive=True) }}"
    resolved_task_names: "{{ (resolved_task_name_to_config | dict2items | json_query('[?((value.deployed==undefined)||(to_string(value.deployed)==to_string(`true`)) || (to_string(value.deployed)==`True`))].key')) if (task_names | upper) == 'ALL' else task_names.split(',') }}"
    resolved_deployed_task_name_to_config_query: "{{ '[?(key==`' +  resolved_task_names | join('`)||(key==`') + '`)]' }}"
    resolved_deployed_task_name_to_config: "{{ resolved_task_name_to_config | dict2items | json_query(resolved_deployed_task_name_to_config_query) | items2dict }}"
    requires_build: "{{ (resolved_deployed_task_name_to_config | dict2items | json_query('[?((value.ecs.task_definition_arn==undefined)||(value.ecs.task_definition_arn==`__unset__`))]')) | length > 0 }}"

  tasks:
  - name: Get configuration from CloudReactor Run Environment
    uri:
      url: "{{ cloudreactor_api_base_url }}/api/v1/run_environments/?name={{ run_environment_name | urlencode }}"
      headers:
        Accept: "application/json"
        Authorization: "Bearer {{cloudreactor_deploy_api_key}}"
      return_content: True
    register: run_environment_result
    when: cloudreactor_enabled
    tags:
      - upload
      - create_tasks

  - name: Ensure Runtime Environment is found
    assert:
      that:
        - run_environment_result.json.count == 1
      fail_msg: "Run Environment '{{ run_environment_name }}' not found in CloudReactor, please create it."
    when: cloudreactor_enabled
    tags:
      - upload
      - create_tasks

  - name: Output Runtime Environment
    debug:
      msg: "Runtime Environment is {{ run_environment }}"
      verbosity: 1
    when: cloudreactor_enabled
    tags:
      - create_tasks

  - name: Output Task Independent AWS settings
    debug:
      msg: "AWS settings: {{ task_indep_aws }}"
      verbosity: 1
    tags:
      - upload
      - create_tasks

  - name: Output Task Independent ECS settings
    debug:
      msg: "ECS settings: {{ task_indep_ecs }}"
      verbosity: 1
    tags:
      - upload
      - create_tasks

  - name: Check if pre-build hook file exists
    stat:
      path: "{{deploy_config_dir}}/hooks/pre_build.yml"
    register: pre_build_hook_file_stat
    tags:
      - build

  # Hook to perform steps before building the Docker image
  - name: Pre-build hook
    include_tasks: "{{deploy_config_dir}}/hooks/pre_build.yml"
    when: pre_build_hook_file_stat.stat.exists
    tags:
      - build

  - debug:
      msg: "task_name_to_config = {{ task_name_to_config }}"
      verbosity: 2

  - debug:
      msg: "env_task_name_to_config = {{ env_task_name_to_config }}"
      verbosity: 2

  - debug:
      msg: "task_name_to_env_config_safe = {{ task_name_to_env_config_safe }}"
      verbosity: 2

  - debug:
      msg: "resolved_task_name_to_config = {{ resolved_task_name_to_config }}"
      verbosity: 2

  - debug: msg="Task version signature = {{task_version_signature}}, resolved task names = {{resolved_task_names}}"
    tags:
      - version
      - build
      - upload
      - create_tasks

  - name: Create output directory
    file:
      path: "build/{{env}}"
      state: directory
    when: requires_build
    tags:
      - build

  - name: Output Docker build options
    debug:
      msg: "Docker build options: {{build_options}}"
      verbosity: 1
    when: requires_build
    tags:
      - build

  - name: Output Docker build command
    debug:
      msg: "Docker build command: 'docker {{docker_common_general_options}} {{docker_build_general_options}} build -f {{dockerfile_path}} --build-arg env={{env}} {{extra_docker_build_args}} -t {{source_docker_image_name}} .'"
      verbosity: 1
    when: requires_build
    tags:
      - build

  - name: Build Docker image
    command: "docker {{docker_common_general_options}} {{docker_build_general_options}} build -f {{dockerfile_path}} --build-arg env={{env}} {{extra_docker_build_args}} -t {{source_docker_image_name}} ."
    args:
      chdir: "{{ docker_context_dir }}"
    when: requires_build
    tags:
      - build

  - name: Create ECR repository
    ecs_ecr:
      name: "{{container_repository}}"
      region: "{{aws_region}}"
    when: requires_build
    tags:
      - upload
      - create_ecr_repo

  - name: Tag Docker image
    command: "docker {{docker_common_general_options}} {{docker_tag_general_options}} tag {{source_docker_image_name}} {{target_docker_image_name}} {{extra_docker_tag_args}}"
    when: requires_build
    tags:
      - upload

  - name: Login to Docker Repository
    shell: "aws ecr get-login-password --region {{task_indep_aws.region | quote}} | docker {{docker_common_general_options}} login --username AWS --password-stdin {{container_registry_host}}"
    when: requires_build
    tags:
      - upload

  - name: Push Docker image
    command: "docker {{docker_common_general_options}} {{docker_push_general_options}} push {{target_docker_image_name}} {{extra_docker_push_args}}"
    when: requires_build
    tags:
      - upload

  - name: Check if post-build hook file exists
    stat:
      path: "{{deploy_config_dir}}/hooks/post_build.yml"
    register: post_build_hook_file_stat
    tags:
      - build

    # Hook to perform steps before after building the Docker image,
    # but before creating the Task in ECS and CloudReactor
  - name: Post-build hook
    include_tasks: "{{deploy_config_dir}}/hooks/post_build.yml"
    when: post_build_hook_file_stat.stat.exists
    tags:
      - build

  - include_tasks: create_task.yml
    with_items: "{{ resolved_task_names }}"
    tags:
      - create_tasks

  - name: Logout of ECR
    command: "docker {{docker_common_general_options}} logout {{container_registry_host}}"
    when: requires_build
    tags:
      - upload
