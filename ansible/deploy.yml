---
# Ansible tasks to deploy projects to AWS ECS, managed by CloudReactor
- name: "{{project_name}}"
  hosts: 127.0.0.1
  connection: local
  vars_files:
    - "{{deploy_config_dir}}/vars/common.yml"
    - "{{deploy_config_dir}}/vars/{{config_filename_stem}}.yml"
  vars:
    work_dir: "{{ lookup('env', 'WORK_DIR') | default('.', true) }}"
    docker_context_dir: "{{ lookup('env', 'CONTAINER_DOCKER_CONTEXT_DIR') | default(work_dir, true) }}"
    deploy_config_dir: "{{ work_dir }}/deploy_config"
    config_filename_stem: "{{ lookup('env', 'CONFIG_FILENAME_STEM') | default(env, true) }}"
    build_options: "{{ default_build_options | default({}) }}"
    dockerfile_path: "{{ lookup('env', 'DOCKERFILE_PATH') | default(build_options.dockerfile_path | default(docker_context_dir + '/Dockerfile', true), true) }}"
    docker_common_general_options: "{{ lookup('env', 'DOCKER_COMMON_GENERAL_OPTIONS') | default(build_options.docker_common_general_options | default(''), true) }}"
    docker_build_general_options: "{{ lookup('env', 'DOCKER_BUILD_GENERAL_OPTIONS') | default(build_options.docker_build_general_options | default(''), true) }}"
    extra_docker_build_args: "{{ lookup('env', 'EXTRA_DOCKER_BUILD_ARGS') | default(build_options.extra_docker_build_args | default(''), true) }}"
    docker_tag_general_options: "{{ lookup('env', 'DOCKER_TAG_GENERAL_OPTIONS') | default(build_options.docker_tag_general_options | default(''), true) }}"
    extra_docker_tag_args: "{{ lookup('env', 'EXTRA_DOCKER_TAG_ARGS') | default(build_options.extra_docker_tag_args | default(''), true) }}"
    docker_push_general_options: "{{ lookup('env', 'DOCKER_PUSH_GENERAL_OPTIONS') | default(build_options.docker_push_general_options | default(''), true) }}"
    extra_docker_push_args: "{{ lookup('env', 'EXTRA_DOCKER_PUSH_ARGS') | default(build_options.extra_docker_push_args | default(''), true) }}"
    resolved_cloudreactor: "{{ default_cloudreactor | default({}) | combine(cloudreactor | default({})) }}"
    cloudreactor_enabled: "{{ resolved_cloudreactor.enabled | default(true) }}"
    cloudreactor_api_base_url: "{{ lookup('env', 'CLOUDREACTOR_API_BASE_URL') | default(resolved_cloudreactor.api_base_url | default('https://api.cloudreactor.io', true), true) }}"
    cloudreactor_deploy_api_key: "{{ lookup('env', 'CLOUDREACTOR_DEPLOY_API_KEY') | default(resolved_cloudreactor.deploy_api_key, true) }}"
    env_task_name_to_config: "{{ task_name_to_env_config | default({}) }}"
    resolved_task_name_to_config: "{{ task_name_to_config | combine(env_task_name_to_config, recursive=True) }}"
    common_task_config: "{{default_task_config | default({}) | combine(task_name_to_config[item] | default({}), recursive=True) }}"
    env_task_config: "{{default_env_task_config | default({}) | combine(task_name_to_env_config[item] | default({}), recursive=True) }}"
    resolved_task_config: "{{ common_task_config | combine(env_task_config, recursive=True) }}"
    resolved_task_names: "{{ (resolved_task_name_to_config | dict2items | json_query('[?((value.deployed==undefined)||(to_string(value.deployed)==to_string(`true`)) || (to_string(value.deployed)==`True`))].key')) if (task_names | upper) == 'ALL' else task_names.split(',') }}"
    task_version_signature: "{{ lookup('env','CLOUDREACTOR_TASK_VERSION_SIGNATURE') | default(ansible_date_time.iso8601_basic, true) }}"
    docker_image_name: "{{project_name}}:{{env}}_{{task_version_signature}}"
    run_environment_name: "{{ resolved_cloudreactor.run_environment | default(env) }}"
    run_environment: "{{ run_environment_result.json.results[0] }}"
    run_environment_exec_method: "{{ run_environment.execution_method_capabilities | selectattr('type', 'equalto', 'AWS ECS') | first }}"
    aws: "{{ run_environment_aws | default({}) | combine(project_aws | default({}), recursive=True) }}"
    aws_region: "{{ aws.region | default(lookup('env', 'AWS_DEFAULT_REGION')) }}"
    ecr_hostname: "{{ aws.account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"
    resolved_ecs: "{{ aws.ecs | default({}) | combine(resolved_task_config.ecs | default({}), recursive=True) }}"
    resolved_ecs_task: "{{ resolved_ecs.task | default({}) }}"
    resolved_ecs_task_network: "{{ resolved_ecs_task.network | default({}) }}"
    resolved_ecs_service: "{{ resolved_ecs.service | default({}) }}"
    task_definition_arn: "{{ (register_ecs_task_result.stdout | from_json).taskDefinition.taskDefinitionArn }}"
    task_build_dir: "build/{{env}}/{{item}}"
    saved_cloudreactor_task: "{{ create_cloudreactor_task_result.json }}"
    # This should be the awslogs-group in ecs_task_definition.json
    log_query: "{{ '/aws/fargate/' + project_name + '-' + env + '-' + item }}"

  tasks:
  - name: Get configuration from CloudReactor Run Environment
    uri:
      url: "{{ cloudreactor_api_base_url }}/api/v1/run_environments/?name={{ run_environment_name | urlencode }}"
      headers:
        Accept: "application/json"
        Authorization: "Token {{cloudreactor_deploy_api_key}}"
      return_content: yes
    register: run_environment_result
    when: cloudreactor_enabled
    tags:
      - upload
      - create_tasks

  - name: Ensure Runtime Environment is found
    assert:
      that:
        - run_environment_result.json.count == 1
      fail_msg: "Run Environment '{{ run_environment_name }}' not found in CloudReactor, please create it."
    when: cloudreactor_enabled
    tags:
      - upload
      - create_tasks

  - name: Output Runtime Environment
    debug:
      msg: "Runtime Environment is {{ run_environment }}, UUID = {{ run_environment.uuid }}"
      verbosity: 1
    when: cloudreactor_enabled
    tags:
      - create_tasks

  - name: Set default AWS configuration from Run Environment
    set_fact:
      run_environment_aws:
        account_id: "{{ run_environment.aws_account_id }}"
        region: "{{ run_environment.aws_default_region }}"
        ecs:
          cluster_name: "{{ run_environment_exec_method.default_cluster_arn }}"
          execution_role_arn: "{{ run_environment_exec_method.default_execution_role }}"
          task:
            network:
              security_groups: "{{ run_environment_exec_method.default_security_groups }}"
              subnets: "{{ run_environment_exec_method.default_subnets }}"
              assign_public_ip: "{{ run_environment_exec_method.default_assign_public_ip }}"
            role_arn: "{{ run_environment_exec_method.task_execution_role | default(run_environment_exec_method.default_execution_role) }}"
    when: cloudreactor_enabled
    tags:
      - upload
      - create_tasks

  - name: Output AWS settings
    debug:
      msg: "Default AWS is {{ aws }}"
      verbosity: 1
    tags:
      - upload
      - create_tasks

  - debug: msg="Task version signature = {{task_version_signature}}, resolved task names = {{resolved_task_names}}"
    tags:
      - version
      - build
      - upload
      - create_tasks

  - name: Login to ECR
    shell: "aws ecr get-login-password --region {{aws.region | quote}} | docker {{docker_common_general_options}} login --username AWS --password-stdin {{ecr_hostname}}"
    tags:
      - upload

  - name: Create output directory
    file:
      path: "build/{{env}}"
      state: directory
    tags:
      - build

  # Hook to perform steps before building the Docker image
  - include_tasks: "{{deploy_config_dir}}/hooks/pre_build.yml"
    tags:
      - build

  - name: Output Docker build options
    debug:
      msg: "Docker build options: {{build_options}}"
      verbosity: 1
    tags:
      - build

  - name: Output Docker build command
    debug:
      msg: "Docker build command: 'docker {{docker_common_general_options}} {{docker_build_general_options}} build -f {{dockerfile_path}} --build-arg env={{env}} {{extra_docker_build_args}} -t {{docker_image_name}} .'"
      verbosity: 1
    tags:
      - build

  - name: Build Docker image
    command: "docker {{docker_common_general_options}} {{docker_build_general_options}} build -f {{dockerfile_path}} --build-arg env={{env}} {{extra_docker_build_args}} -t {{docker_image_name}} ."
    args:
      chdir: "{{ docker_context_dir }}"
    tags:
      - build

  - name: Create ECR repository
    ecs_ecr:
      name: "{{project_name}}"
      region: "{{aws_region}}"
    tags:
      - upload
      - create_ecr_repo

  - name: Tag Docker image
    command: "docker {{docker_common_general_options}} {{docker_tag_general_options}} tag {{docker_image_name}} {{ecr_hostname}}/{{docker_image_name}} {{extra_docker_tag_args}}"
    tags:
      - upload

  - name: Push Docker image
    command: "docker {{docker_common_general_options}} {{docker_push_general_options}} push {{ecr_hostname}}/{{docker_image_name}} {{extra_docker_push_args}}"
    tags:
      - upload

    # Hook to perform steps before after building the Docker image,
    # but before creating the Task in ECS and CloudReactor
  - include_tasks: "{{deploy_config_dir}}/hooks/post_build.yml"
    tags:
      - build

  - include_tasks: create_task.yml
    with_items: "{{ resolved_task_names }}"
    tags:
      - create_tasks

  - name: Logout of ECR
    command: "docker {{docker_common_general_options}} logout {{ecr_hostname}}"
    tags:
      - upload
