{% set proc_wrapper_property_names = [
  'config_merge_strategy',
  'overwrite_env_with_secrets',
  'config_ttl_seconds',
  'resolve_secrets',
  'max_config_resolution_depth',
  'max_config_resolution_iterations',
  'fail_fast_config_resolution',
  'resolvable_env_var_prefix',
  'resolvable_env_var_suffix',
  'resolvable_config_property_name_prefix',
  'resolvable_config_property_name_suffix',
  'env_var_name_for_config',
  'shell_mode',
  'strip_shell_wrapping',
  'process_max_retries',
  'process_retry_delay_seconds',
  'process_check_interval',
  'process_group_termination',
  'process_termination_grace_period_seconds',
  'offline_mode',
  'prevent_offline_execution',
  'send_pid',
  'send_hostname',
  'send_runtime_metadata',
  'api_heartbeat_interval_seconds',
  'api_error_timeout_seconds',
  'api_retry_delay_seconds',
  'api_resume_delay_seconds',
  'api_task_execution_creation_error_timeout_seconds',
  'api_task_execution_creation_conflict_timeout_seconds',
  'api_task_execution_creation_conflict_retry_delay_seconds',
  'api_final_update_timeout_seconds',
  'api_request_timeout_seconds',
  'enable_status_update_listener',
  'status_update_interval_seconds',
  'status_update_socket_port',
  'log_level',
  'log_secrets',
  'include_timestamps_in_log',
  'rollbar_retries',
  'rollbar_retry_delay_seconds',
  'rollbar_timeout_seconds'
] %}

{% macro default_formatter(v) -%}
  {% if v is boolean -%}
  "{{ v | string | upper }}"
  {%- else -%}
  {{ v | string | to_json }}
  {%- endif %}
{%- endmacro %}

{% set task_name=item %}{# from 'with_items' in the calling task #}
{% set service_instance_count=resolved_task_config.service_instance_count | default('__unset__') %}

{% if resolved_task_config.is_service is defined %}
  {% set is_service=resolved_task_config.is_service %}
{% else %}
  {% if service_instance_count is number %}
    {% set is_service=service_instance_count > 0 %}
  {% else %}
    {% set is_service=false %}
  {% endif %}
{% endif %}

{% set max_concurrency=resolved_task_config.max_concurrency | default(1) %}
{% set global_task_version_number=project_version_number | default('__unset__') %}
{% set task_version_number=resolved_task_config.task_version_number | default(global_task_version_number) %}
{% set global_task_version_text=project_version_text | default('__unset__') %}
{% set task_version_text=resolved_task_config.task_version_text | default(global_task_version_text) %}
{% set wrapper=resolved_task_config.wrapper | default({}) %}
{% set cpu_units=resolved_ecs.cpu_units | default(256) %}
{% set memory_mb=resolved_ecs.memory_mb | default(512) %}
{% set extra_container_cpu_units=resolved_ecs.extra_container_cpu_units | default(0) %}
{% set extra_container_memory_mb=resolved_ecs.extra_container_memory_mb | default(0) %}
{% set use_default_linux_parameters=resolved_ecs.use_default_linux_parameters | default(true) %}
{% set environment_variables=resolved_task_config.env | default({}) %}

{% set resolvable_env_var_name_prefix = wrapper.resolvable_env_var_name_prefix | default('') %}
{% set resolvable_env_var_name_suffix = wrapper.resolvable_env_var_name_suffix | default('_FOR_PROC_WRAPPER_TO_RESOLVE') %}

{% macro env_def(obj, name, maybe_secret=false, env_name='',
  formatter=default_formatter) -%}
  {%- if (obj[name] is defined) and (obj[name] != '__unset__') -%}
    {%- set v = obj[name] -%}
    {%- set is_secret = maybe_secret and (v is string) and
        (v.startswith('arn:aws:secretsmanager:') or
         v.startswith('arn:aws:s3:::') or
         v.startswith('file://') or v.startswith('ENV:') or
         v.startswith('CONFIG:') or v.startswith('PLAIN:')) -%}
    {%- if env_name == '' -%}
      {%- set env_name = 'PROC_WRAPPER_' + name.upper() %}
    {%- endif -%}
    {%- if is_secret -%}
      {%- set resolved_env_name = resolvable_env_var_name_prefix + env_name + resolvable_env_var_name_suffix %}
    {%- else -%}
      {%- set resolved_env_name = env_name %}
    {%- endif -%}
    {
      "name": "{{ resolved_env_name }}",
      "value" : {%+ if formatter == 'caller' %}{{ caller(v) }}{%+ else %}{{ formatter(v) }}{% endif %}
    },
  {%- endif -%}
{%- endmacro %}

{
    "requiresCompatibilities": [
        "FARGATE"
    ],
    "family": {{ task_definition_family | to_json }},
    "networkMode": "awsvpc",
    "executionRoleArn": {{ resolved_ecs.execution_role_arn | to_json }},
    {% if (resolved_ecs.task_role_arn is defined) and (resolved_ecs.task_role_arn != '__unset__') %}
    "taskRoleArn": {{ resolved_ecs.task_role_arn | to_json }},
    {% endif %}
    "cpu": "{{cpu_units}}",
    "memory": "{{memory_mb}}",

    {% if resolved_aws.tags is defined %}
    "tags": [
      {% for name, value in resolved_aws.tags.items() %}
      {
          "key" : {{ name | string | to_json }},
          "value" : {{ value | string | to_json }}
      }{% if not loop.last %},{% endif %}
      {% endfor %}
    ],
    {% endif %}

    "containerDefinitions": [
        {
            "name": {{ main_container_name | to_json }},
            "image": {{ target_docker_image_name | to_json }},
            "cpu": {{ cpu_units - extra_container_cpu_units }},
            "memory": {{ memory_mb - extra_container_memory_mb }},
            "essential": true,
            "logConfiguration":
            {% if resolved_aws.log_configuration is defined %}
                {{ resolved_aws.log_configuration | to_json }}
            {% else %}
            {
                "logDriver": "awslogs",
                "options": {
                    {# Note: the ECS-CloudWatchLogs policy must be attached to your ecsTaskExecutionRole so that
                       the log group can be created. Alternatively, you may create the group yourself before deploying and
                       set this to "false".
                       See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_cloudwatch_logs.html
                    #}
                    "awslogs-create-group": "{{ resolved_aws_awslogs.create_group | default('true') }}",
                    "awslogs-group": {{ awslogs_group | to_json }},
                    "awslogs-region": {{ resolved_aws_awslogs.region | default(aws_region) | to_json }},
                    "awslogs-stream-prefix": {{ resolved_aws_awslogs.stream_prefix | default(project_name + '-' + env) | to_json }}
                }
            },
            {% endif %}

            "environment": [
                {% for name, value in environment_variables.items() %}
                {
                    "name" : {{ name | string | to_json }},
                    "value" : {{ value | string | to_json }}
                },
                {% endfor %}
                {
                    "name" : "PROC_WRAPPER_API_BASE_URL",
                    "value" : {{ cloudreactor_api_base_url | to_json }}
                },
                {# Only puts PROC_WRAPPER_API_KEY in your environment if
                   resolved_cloudreactor.task_api_key is defined. Leave it undefined if you
                   plan on getting it from AWS Secrets Manager through the
                   ECS Task Execution role (where AWS injects the environment).
                   The API key can also be a AWS Secrets Manager ARN which the proc_wrapper
                   module will fetch at runtime.
                #}
                {{ env_def(resolved_cloudreactor, 'task_api_key', true, 'PROC_WRAPPER_API_KEY') }}
                {
                    "name" : "PROC_WRAPPER_DEPLOYMENT",
                    "value" : {{ env | to_json }}
                },
                {
                    "name" : "PROC_WRAPPER_TASK_NAME",
                    "value" : {{ (project_name + '_' +  task_name + '_' + env) | to_json }}
                },
                {
                    "name" : "PROC_WRAPPER_TASK_IS_SERVICE",
                    "value" : "{{ is_service | string | upper }}"
                },
                {
                    "name" : "PROC_WRAPPER_TASK_MAX_CONCURRENCY",
                    "value" : "{% if max_concurrency is number %}{{ max_concurrency }}{% else %}-1{% endif %}"
                },
                {% if wrapper.env_locations is defined %}
                {
                    "name": "PROC_WRAPPER_ENV_LOCATIONS",
                    "value": {% filter to_json %}{% for loc in wrapper.env_locations %}{{ loc }}{{ '' if loop.last else ',' }}{% endfor %}{% endfilter %}
                },
                {% endif %}
                {% if wrapper.config_locations is defined %}
                {
                    "name": "PROC_WRAPPER_CONFIG_LOCATIONS",
                    "value": {% filter to_json %}{% for loc in wrapper.config_locations %}{{ loc }}{{ '' if loop.last else ',' }}{% endfor %}{% endfilter %}
                },
                {% endif %}
                {{ env_def(resolved_task_config, 'work_dir') }}
                {% if service_instance_count == '__unset__' %}
                {
                    "name" : "PROC_WRAPPER_PROCESS_TIMEOUT_SECONDS",
                    "value" : "{{ wrapper.process_timeout_seconds | default(-1) }}"
                },
                {% endif %}
                {% if task_version_number != '__unset__' %}
                {
                    "name" : "PROC_WRAPPER_TASK_VERSION_NUMBER",
                    "value" : "{{task_version_number}}"
                },
                {% endif %}
                {% if task_version_text != '__unset__' %}
                {
                    "name" : "PROC_WRAPPER_TASK_VERSION_TEXT",
                    "value" : {{ task_version_text | to_json }}
                },
                {% endif %}
                {% if task_version_signature is defined %}
                {
                    "name" : "PROC_WRAPPER_TASK_VERSION_SIGNATURE",
                    "value" : {{ task_version_signature | to_json }}
                },
                {% endif %}
                {% if wrapper.other_instance_metadata is defined %}
                {
                    "name" : "PROC_WRAPPER_TASK_INSTANCE_METADATA",
                    "value" : {{ wrapper.other_instance_metadata | to_json | to_json }}
                },
                {% endif %}
                {% for prop_name in proc_wrapper_property_names %}
                {{ env_def(wrapper, prop_name) }}
                {% endfor %}
                {# Only puts PROC_WRAPPER_ROLLBAR_ACCESS_TOKEN in your environment if
                   wrapper.rollbar_access_token is defined. The value may be a
                   AWS Secrets Manager ARN which will be fetched by the
                   proc_wrapper module at runtime.
                #}
                {{ env_def(wrapper, 'rollbar_access_token', true) }}
                {# This is last because it is required so it definitely does not end with a comma #}
                {
                    "name" : "PROC_WRAPPER_TASK_COMMAND",
                    "value" : {{ resolved_task_config.command | to_json }}
                }
            ]
            {% if use_default_linux_parameters %}
            ,
            "linuxParameters": {
              "initProcessEnabled": true
            }
            {% endif %}
            {% if resolved_ecs.extra_main_container_properties is defined %}
            ,
            {% for name, value in resolved_ecs.extra_main_container_properties.items() %}
            {{ name | to_json }}: {{ value | to_json }}{{ '' if loop.last else ',' }}
            {% endfor %}
            {% endif %}
        }
        {% if resolved_ecs.extra_container_definitions[0] is defined %}
        ,
        {% for container_definition in resolved_ecs.extra_container_definitions %}
        {{ container_definition | to_json }}{{ '' if loop.last else ',' }}
        {% endfor %}
        {% endif %}
    ]
    {% if resolved_ecs.extra_task_definition_properties is defined %}
    ,
    {% for name, value in resolved_ecs.extra_task_definition_properties.items() %}
    {{ name | to_json }}: {{ value | to_json }}{{ '' if loop.last else ',' }}
    {% endfor %}
    {% endif %}
}
