---
{% set task_name=item %}{# from 'with_items' in the calling task #}
{% set common_task_config=default_task_config | default({}) | combine(task_name_to_config[task_name] | default({}), recursive=True) %}
{% set env_task_config=default_env_task_config | default({}) | combine(task_name_to_env_config[task_name] | default({}), recursive=True) %}
{% set task_config=common_task_config | combine(env_task_config, recursive=True) %}
{% set service_instance_count=task_config.service_instance_count | default('null') %}

{% if task_config.is_service is defined %}
  {% set is_service=task_config.is_service %}
{% else %}
  {% if service_instance_count is number %}
    {% set is_service=service_instance_count > 0 %}
  {% else %}
    {% set is_service=false %}
  {% endif %}
{% endif %}

{% set max_concurrency=task_config.max_concurrency | default(1) %}
{% set wrapper=task_config.wrapper | default({}) %}
{% set task_ecs=task_config.ecs | default({}) %}
{% set project_ecs=project_aws.ecs | default({}) %}
{% set project_task_ecs=project_ecs | combine(task_ecs, recursive=True) %}
{% set cpu_units=project_task_ecs.cpu_units | default(256) %}
{% set memory_mb=project_task_ecs.memory_mb | default(512) %}

{% set task_property_names = [
  'description',
  'enabled',
  'max_manual_start_delay_seconds',
  'max_heartbeat_lateness',
  'schedule',
  'scheduled_instance_count',
  'min_service_instance_count',
  'postponed_failure_before_success_seconds',
  'max_postponed_failure_count',
  'postponed_timeout_before_success_seconds',
  'max_postponed_timeout_count',
  'postponed_missing_execution_before_start_seconds',
  'max_postponed_missing_execution_count',
  'min_missing_execution_delay_seconds',
  'should_clear_failure_alerts_on_success',
  'should_clear_timeout_alerts_on_success'
] %}

{% set project_aws_subnets=project_aws.subnets | default('inherit') %}
{% set subnets=project_task_ecs.task.network.subnets | default(project_aws_subnets) %}

{% set project_aws_security_groups=project_aws.security_groups | default('inherit') %}
{% set security_groups=project_task_ecs.task.network.security_groups | default(project_aws_security_groups) %}

{% set alert_methods=task_config.alert_methods | default('inherit') %}
{% set links=task_config.links | default('inherit') %}

{# This should be the awslogs-group in ecs_task_definition.json #}
{% set log_query="/aws/fargate/" + project_name + "-" + env + "-" + task_name %}

{% macro prop_def(obj, name, prop_name='') -%}
  {%- if (obj[name] is defined) and (obj[name] != 'inherit') -%}
    {%- if prop_name == '' -%}
      {%- set prop_name = name %}
    {%- endif -%}
    {%- set v = obj[name] -%}
    {%- if v is none -%}
      "{{ prop_name }}": null
    {%- else -%}
      "{{ prop_name }}": "{{ v }}"
    {%- endif -%}
  {%- endif -%}
{%- endmacro %}

# For debugging
# task_config: {{ task_config | to_json }}
# Project ECS: {{ project_ecs | to_json }}
# Task ECS: {{ task_ecs | to_json }}
# Project Task ECS: {{ project_task_ecs | to_json }}
# wrapper: {{ wrapper | to_json }}
# subnets: {{ subnets | to_json }}
# security groups: {{ security_groups | to_json }}
# End debug

name: "{{project_name}}_{{task_name}}_{{env}}"

{% for prop_name in task_property_names %}
{{ prop_def(task_config, prop_name) }}
{% endfor %}

{% if project_url is defined %}
project_url: "{{project_url}}"
{% endif %}

{% if wrapper.api_heartbeat_interval_seconds is defined %}
api_heartbeat_interval_seconds: {{ wrapper.api_heartbeat_interval_seconds }}
{% elif (max_concurrency is not none) and (max_concurrency >= 1) %}
api_heartbeat_interval_seconds: 30
{% else %}
api_heartbeat_interval_seconds: 600
{% endif %}

{% if task_config.max_concurrency is defined %}
max_concurrency: {% if max_concurrency is number %}{{ max_concurrency }}{% else %}null{% endif %}
{% endif %}

is_service: {{is_service}}

{% if service_instance_count != 'null' %}
service_instance_count: {{service_instance_count}}
{% endif %}

max_age_seconds: {% if service_instance_count == 'null' %}{{task_config.max_age_seconds | default('3600') }}{% else %}null{% endif %}

run_environment:
  name: "{{ task_config.run_environment | default(run_environment_name) }}"

execution_method_capability:
  type: AWS ECS
  task_definition_arn: {{ task_definition_arn }}
  default_launch_type: FARGATE
  supported_launch_types:
    - FARGATE

  {{ prop_def(project_task_ecs, 'cluster_name', 'default_cluster_name') }}
  {{ prop_def(project_task_ecs, 'platform_version', 'default_platform_version') }}

  {% if subnets is none %}
  default_subnets: null
  {% else %}
  {% if subnets != 'inherit' %}
  default_subnets:
  {% for subnet in subnets %}
    - "{{ subnet }}"
  {% endfor %}
  {% endif %}
  {% endif %}

  {% if security_groups is none %}
  default_security_groups: null
  {% else %}
  {% if security_groups != 'inherit' %}
  default_security_groups:
  {% for security_group in security_groups %}
    - "{{ security_group }}"
  {% endfor %}
  {% endif %}
  {% endif %}

  {% if project_task_ecs.task.tags is defined %}
  tags: {{ project_task_ecs.task.tags | to_yaml(width=2147483647) }}
  {% endif %}

  {{ prop_def(project_task_ecs.task.network, 'assign_public_ip', 'default_assign_public_ip') }}

  {{ prop_def(project_task_ecs, 'execution_role_arn', 'default_execution_role') }}
  {{ prop_def(project_task_ecs.task, 'role_arn', 'default_task_role') }}

  allocated_cpu_units: {{cpu_units}}
  allocated_memory_mb: {{memory_mb}}
  main_container_name: "{{project_name}}_{{task_name}}_{{env}}"

  {{ prop_def(project_task_ecs, 'enable_ecs_managed_tags') }}

  {% if project_task_ecs.service is defined %}
  service_options:
    {% if project_task_ecs.service.load_balancers is defined %}
    {% if project_task_ecs.service.load_balancers[0] is defined %}
    load_balancers:
      {% for load_balancer in project_task_ecs.service.load_balancers %}
      - target_group_arn: "{{load_balancer.target_group_arn}}"
        container_name:  "{{project_name}}_{{task_name}}_{{env}}"
        container_port: {{load_balancer.container_port}}
      {% endfor %}
    {% if project_task_ecs.service.load_balancer_health_check_grace_period_seconds is defined %}
    load_balancer_health_check_grace_period_seconds: {{ project_task_ecs.service.load_balancer_health_check_grace_period_seconds }}
    {% endif %}
    {% else %}
    load_balancers: []
    {% endif %}
    {% endif %}
    {% if project_task_ecs.service.deployment_configuration is defined %}
    force_new_deployment: {{ project_task_ecs.service.deployment_configuration.force_new_deployment | default(false) }}
    deploy_minimum_healthy_percent: {{ project_task_ecs.service.deployment_configuration.minimum_healthy_percent | default(100) }}
    deploy_maximum_percent: {{ project_task_ecs.service.deployment_configuration.maximum_percent | default(200) }}
    deploy_enable_circuit_breaker: {{ project_task_ecs.service.deployment_configuration.enable_circuit_breaker | default(true) }}
    deploy_rollback_on_failure: {{ project_task_ecs.service.deployment_configuration.rollback_on_failure | default(true) }}
    {% endif %}

    {{ prop_def(project_task_ecs.service, 'enable_ecs_managed_tags') }}
    {{ prop_def(project_task_ecs.service, 'propagate_tags') }}

    {% if project_task_ecs.service.tags is defined %}
    tags: {{ project_task_ecs.service.tags | to_yaml(width=2147483647) }}
    {% endif %}
  {% endif %}

log_query: "{{log_query}}"

{% if alert_methods != 'inherit' %}
  {% if alert_methods is none %}
alert_methods: null
  {% elif alert_methods[0] is defined %}
alert_methods:
    {% for alert_method in alert_methods %}
  - name: "{{alert_method}}"
    {% endfor %}
  {% else %}
alert_methods: []
  {% endif %}
{% endif %}

{% if links != 'inherit' %}
  {% if links is none %}
links: null
  {% elif links[0] is defined %}
links:
    {% for link in links %}
  - name: "{{link.name}}"
    {{ prop_def(link, 'link_url_template') }}
    {{ prop_def(link, 'icon_url') }}
    {{ prop_def(link, 'description') }}
    {% endfor %}
  {% else %}
links: []
  {% endif %}
{% endif %}
