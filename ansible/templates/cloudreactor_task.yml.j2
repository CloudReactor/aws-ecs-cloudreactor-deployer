---
{% set task_name=item %}{# from 'with_items' in the calling task #}

{% set service_instance_count=resolved_task_config.service_instance_count | default('__unset__') %}

{% if resolved_task_config.is_service is defined %}
  {% set is_service=resolved_task_config.is_service %}
{% else %}
  {% if service_instance_count is number %}
    {% set is_service=service_instance_count > 0 %}
  {% else %}
    {% set is_service=false %}
  {% endif %}
{% endif %}

{% set max_concurrency=resolved_task_config.max_concurrency | default(1) %}
{% set max_age_seconds=resolved_task_config.max_age_seconds | default('__unset__') %}
{% set wrapper=resolved_task_config.wrapper | default({}) %}
{% set task_ecs=resolved_task_config.ecs | default({}) %}
{% set project_env_task_ecs=project_env_ecs | combine(task_ecs, recursive=true) %}
{% set task_aws=resolved_task_config.aws | default({}) %}
{% set project_env_task_aws=project_env_aws | combine(task_aws, recursive=true) %}
{% set project_env_task_aws_network=project_env_task_aws.network | default({}) %}

{% set cpu_units=project_env_task_ecs.cpu_units | default(256) %}
{% set memory_mb=project_env_task_ecs.memory_mb | default(512) %}
{% set extra_container_cpu_units=project_env_task_ecs.extra_container_cpu_units | default(0) %}
{% set extra_container_memory_mb=project_env_task_ecs.extra_container_memory_mb | default(0) %}

{% set task_property_names = [
  'description',
  'enabled',
  'max_manual_start_delay_seconds',
  'max_heartbeat_lateness',
  'schedule',
  'scheduled_instance_count',
  'min_service_instance_count',
  'postponed_failure_before_success_seconds',
  'max_postponed_failure_count',
  'postponed_timeout_before_success_seconds',
  'max_postponed_timeout_count',
  'postponed_missing_execution_before_start_seconds',
  'max_postponed_missing_execution_count',
  'min_missing_execution_delay_seconds',
  'should_clear_failure_alerts_on_success',
  'should_clear_timeout_alerts_on_success',
  'is_scheduling_managed',
  'is_service_managed',
  'default_input_value',
  'input_value_schema',
  'output_value_schema',
  'managed_probability',
  'failure_report_probability',
  'timeout_report_probability',
] %}

{% macro filtered_array_prop_def(arr, prop_name) -%}
  {% if (arr is defined) and (arr != '__unset__') %}
    {% set filtered_arr=arr | json_query('[?((@.included == undefined) || (to_string(@.included) == to_string(`true`)) || (to_string(@.included) == `True`))]')  %}
  {% else %}
    {% set filtered_arr = '__unset__' %}
  {% endif %}

  {% if filtered_arr != '__unset__' %}
    {% if filtered_arr is none -%}
  "{{- prop_name}}": null
    {% elif filtered_arr[0] is defined -%}
  "{{- prop_name}}":
    {% for element in filtered_arr %}
      {{- caller(element) }}
    {% endfor %}
    {% else %}
  "{{- prop_name}}": []
    {% endif %}
  {% endif %}
{%- endmacro %}

{% macro prop_value(v) -%}
{%- if v is none -%}
null
{%- elif v is number -%}
{{- v }}
{%- elif v is boolean -%}
{{- v | string | lower }}
{%- elif v is mapping -%}
{{- v | to_yaml(width=2147483647) }}
{%- else -%}
"{{- v }}"
{%- endif -%}
{%- endmacro %}

{% macro prop_def(obj, name, prop_name='', default_value='__unset__') -%}
  {%- set v = obj[name] | default(default_value) -%}
  {%- if v != '__unset__' -%}
    {%- if prop_name == '' -%}
      {%- set prop_name = name %}
    {%- endif -%}
  {{- prop_name }}: {{ (v | string | lower) if v is boolean else prop_value(v) }}
  {%- endif -%}
{%- endmacro %}

{% set subnets=project_env_task_aws_network.subnets | default('__unset__') %}
{% set security_groups=project_env_task_aws_network.security_groups | default('__unset__') %}

# For debugging
# resolved_task_config: {{ resolved_task_config | to_json }}
# Project Env ECS: {{ project_env_ecs | to_json }}
# Task ECS: {{ task_ecs | to_json }}
# Project Env AWS: {{ project_env_aws | to_json }}
# Project Env Task ECS: {{ project_env_task_ecs | to_json }}
# Task AWS: {{ task_aws | to_json }}
# Project Env Task AWS: {{ project_env_task_aws | to_json }}
# wrapper: {{ wrapper | to_json }}
# subnets: {{ subnets | to_json }}
# security groups: {{ security_groups | to_json }}
# End debug

name: "{{cloudreactor_task_name}}"

{% for prop_name in task_property_names %}
{{ prop_def(resolved_task_config, prop_name) }}
{% endfor %}

{% if source_repository_url is defined %}
project_url: "{{source_repository_url}}"
{% endif %}

{% if wrapper.api_heartbeat_interval_seconds is defined %}
{{ prop_def(wrapper, 'api_heartbeat_interval_seconds', prop_name='heartbeat_interval_seconds') }}
{% else %}
heartbeat_interval_seconds: 600
{% endif %}

{% if (resolved_task_config.max_concurrency is defined) and (resolved_task_config.max_concurrency != '__unset__') %}
max_concurrency: {% if max_concurrency is number %}{{ max_concurrency }}{% else %}null{% endif %}
{% endif %}

is_service: {{is_service}}

{% if service_instance_count != '__unset__' %}
service_instance_count: {{service_instance_count}}
{% endif %}

{% if max_age_seconds != '__unset__' %}
max_age_seconds: {% if is_service %}null{% else %}{{ resolved_task_config.max_age_seconds | default('null') }}{% endif %}
{% endif %}

run_environment:
  name: "{{ resolved_task_config.run_environment | default(run_environment_name) }}"

allocated_cpu_units: {{cpu_units}}
allocated_memory_mb: {{memory_mb}}

deployment:
  task_execution_uuid: {% if deployment_task_execution_uuid == '__unset__' %}null{% else %}{{ deployment_task_execution_uuid }}{% endif %}

execution_method_type: AWS ECS
execution_method_capability_details:
  task_definition_arn: {{ task_definition_arn }}
  launch_type: FARGATE
  supported_launch_types:
    - FARGATE

  {{ prop_def(project_env_task_ecs, 'cluster_arn') }}

  main_container_name: "{{main_container_name}}"
  main_container_cpu_units: {{ cpu_units - extra_container_cpu_units }}
  main_container_memory_mb: {{ memory_mb - extra_container_memory_mb }}

  {{ prop_def(project_env_task_ecs, 'execution_role_arn') }}
  {{ prop_def(project_env_task_ecs, 'task_role_arn') }}
  {{ prop_def(project_env_task_ecs, 'platform_version') }}
  {{ prop_def(project_env_task_ecs, 'enable_ecs_managed_tags') }}
  {{ prop_def(project_env_task_ecs, 'enable_execute_command') }}

infrastructure_type: AWS
infrastructure_settings:
  network:
    region: "{{aws_region}}"

    {% if subnets is none %}
    subnets: null
    {% elif subnets != '__unset__' %}
    subnets:
    {% for subnet in subnets %}
      - "{{ subnet }}"
    {% endfor %}
    {% endif %}

    {% if security_groups is none %}
    security_groups: null
    {% elif security_groups != '__unset__' %}
    security_groups:
    {% for security_group in security_groups %}
      - "{{ security_group }}"
    {% endfor %}
    {% endif %}

    {{ prop_def(project_env_task_aws_network, 'assign_public_ip') }}

  {% if project_env_task_aws.log_configuration is defined %}
  logging:
    driver: "{{ project_env_task_aws.log_configuration.logDriver }}"
    options: {{ project_env_task_aws.log_configuration.options | default({}) | to_yaml(width=2147483647) }}
  {% else %}
  logging:
    driver: awslogs
    options:
      {{ prop_def(resolved_aws_awslogs, 'create_group', '', 'true') }}
      group: "{{ awslogs_group }}"
      stream_prefix: "{{ awslogs_stream_prefix }}"
      region: "{{ resolved_aws_awslogs.region | default(aws_region) }}"
  {% endif %}

  {% if (project_env_task_aws.tags is defined) and (project_env_task_aws.tags != '__unset__') %}
  tags: {{  project_env_task_aws.tags | to_yaml(width=2147483647) }}
  {% endif %}

{% if resolved_ecs.service is defined %}
service_provider_type: AWS ECS
service_settings:
  {{ prop_def(resolved_ecs_service, 'force_new_deployment') }}
  {{ prop_def(resolved_ecs_service, 'enable_ecs_managed_tags') }}
  {{ prop_def(resolved_ecs_service, 'propagate_tags') }}
  {% if (resolved_ecs_service.tags is defined) and (resolved_ecs_service.tags != '__unset__') %}
  tags: {{ resolved_ecs_service.tags | to_yaml(width=2147483647) }}
  {% endif %}

  {% if resolved_ecs_service.load_balancer_settings is defined %}
  load_balancer_settings:
    {{ prop_def(resolved_ecs_service.load_balancer_settings, 'health_check_grace_period_seconds') }}

    {% if resolved_ecs_service.load_balancer_settings.load_balancers[0] is defined %}
    load_balancers:
      {% for load_balancer in resolved_ecs_service.load_balancer_settings.load_balancers %}
      - target_group_arn: "{{load_balancer.target_group_arn}}"
        container_name:  "{{main_container_name}}"
        container_port: {{load_balancer.container_port}}
      {% endfor %}
    {% else %}
    load_balancers: []
    {% endif %}
  {% endif %}

  {% if resolved_ecs_service.deployment_configuration is defined %}
  deployment_configuration:
    minimum_healthy_percent: {{ resolved_ecs_service.deployment_configuration.minimum_healthy_percent | default(100) }}
    maximum_percent: {{ resolved_ecs_service.deployment_configuration.maximum_percent | default(200) }}
    {% if resolved_ecs_service.deployment_configuration.deployment_circuit_breaker is defined %}
    deployment_circuit_breaker:
      enable: {{ resolved_ecs_service.deployment_configuration.enable_circuit_breaker | default(true) }}
      {{ prop_def(resolved_ecs_service.deployment_configuration.deployment_circuit_breaker, 'rollback_on_failure') }}
    {% endif %}
  {% endif %}
{% endif %}

log_query: "{{ log_query }}"

{% call(alert_method) filtered_array_prop_def(resolved_task_config.alert_methods, 'alert_methods') %}
  - name: "{{ alert_method.name }}"
{% endcall %}

{% call(link) filtered_array_prop_def(resolved_task_config.links, 'links') %}
  - name: "{{link.name}}"
    {{ prop_def(link, 'link_url_template') }}
    {{ prop_def(link, 'icon_url') }}
    {{ prop_def(link, 'description') }}
{% endcall %}
