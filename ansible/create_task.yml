- name: Set per-Task variables step 1
  set_fact:
    task_name: "{{ item }}"
    task_build_dir: "build/{{env}}/{{item}}"
    resolved_task_config: "{{ task_indep_task_config | combine(resolved_task_name_to_config[item] | default({}), recursive=True) }}"

- name: Set per-Task variables step 2
  set_fact:
    deployed: "{{resolved_task_config.deployed | default(true) }}"
    resolved_aws: "{{ task_indep_aws | combine(resolved_task_config.aws | default({})) }}"
    resolved_ecs: "{{ task_indep_ecs | combine(resolved_task_config.ecs | default({}), recursive=True) }}"
  tags:
    - always

- name: Set per-Task variables step 3
  set_fact:
    resolved_aws_network: "{{ resolved_aws.network | default({}) }}"
    resolved_aws_logging: "{{ resolved_aws.logging | default({}) }}"
    # ecs.service is allow for backward compatibility reasons, may deprecate in
    # a later release.
    resolved_ecs_service: "{{ resolved_task_config.service_settings | default(resolved_ecs.service | default({})) }}"
    task_definition_family: "{{ resolved_ecs.task_definition_family | default(project_name + '_' +  task_name + '_' + env, true) }}"
    main_container_name: "{{ resolved_ecs.main_container_name | default('main', true) }}"
  tags:
    - always

- name: Set per-Task variables step 4
  set_fact:
    predefined_task_definition_arn: "{{ resolved_ecs.task_definition_arn if (resolved_ecs.task_definition_arn is defined) and (resolved_ecs.task_definition_arn != '__unset__') else none }}"
    resolved_aws_awslogs: "{{ resolved_aws_logging.awslogs | default({}) }}"
  tags:
    - always

- name: Set per-Task variables step 5
  set_fact:
    awslogs_stream_prefix: "{{ resolved_aws_awslogs.stream_prefix | default(project_name + '-' + env) }}"
  tags:
    - always

- name: Set per-Task variables step 6
  set_fact:
    awslogs_group: "{{ resolved_aws_awslogs.log_group | default('/aws/fargate/' + awslogs_stream_prefix + '-' + task_name) }}"
  tags:
    - always

- name: Set per-Task variables step 7
  set_fact:
    log_query: "{{ awslogs_group }}"
  tags:
    - always

- name: Output Task properties
  debug:
    msg: "{{ resolved_task_config | to_json }}"
    verbosity: 2
  tags:
    - always

- name: Create task build directory {{task_name}}
  file:
    path: "{{task_build_dir}}"
    state: directory
  when: deployed
  tags:
    - always

- name: Create ECS task definition file {{task_name}}
  template: src=/home/appuser/work/templates/ecs_task_definition.json.j2
            dest={{task_build_dir}}/ecs_task_definition.json
            lstrip_blocks=yes
  when: deployed and (not predefined_task_definition_arn)
  tags:
    - always

- name: Read ECS Task Definition
  include_vars:
    file: "{{task_build_dir}}/ecs_task_definition.json"
    name: ecs_task_definition
  when: deployed and (ansible_verbosity >= 2) and (not predefined_task_definition_arn)
  tags:
    - always

- name: Register ECS task definition {{task_name}}
  command: "aws ecs register-task-definition --region={{aws_region | quote}} --cli-input-json file://ecs_task_definition.json"
  args:
    chdir: "{{task_build_dir}}"
  register: register_ecs_task_result
  when: deployed and (not predefined_task_definition_arn)
  tags:
    - always

- name: Set saved_cloudreactor_task
  set_fact:
    task_definition_arn: "{{ (register_ecs_task_result.stdout | from_json).taskDefinition.taskDefinitionArn if register_ecs_task_result.stdout is defined else predefined_task_definition_arn }}"
  when: deployed and (not predefined_task_definition_arn)
  tags:
    - always

- name: Output Task Definition ARN
  debug:
    msg: "Task Definition ARN = {{task_definition_arn}}"
  when: deployed

- name: Create CloudReactor Task definition {{task_name}}
  template: src=/home/appuser/work/templates/cloudreactor_task.yml.j2
            dest="{{task_build_dir}}/cloudreactor_task.yml"
            lstrip_blocks=yes
  when: deployed
  tags:
    - always

- name: Output CloudReactor Task yaml
  debug:
    msg: "{{ ('CloudReactor Task YAML =\n' + lookup('ansible.builtin.file', task_build_dir + '/cloudreactor_task.yml')).split('\n') }}"
  when: deployed

- name: Read CloudReactor Task yaml
  include_vars:
    file: "{{task_build_dir}}/cloudreactor_task.yml"
    name: cloudreactor_task
  when: cloudreactor_enabled and deployed
  tags:
    - always

- name: Output CloudReactor Task JSON
  debug:
    msg: "{{ cloudreactor_task | to_json }}"
    verbosity: 2
  when: cloudreactor_enabled and deployed
  tags:
    - always

- name: Create/update Task in CloudReactor
  uri:
    url: "{{ cloudreactor_api_base_url }}/api/v1/tasks/"
    method: POST
    headers:
      Authorization: "Bearer {{cloudreactor_deploy_api_key}}"
    return_content: True
    body: "{{ cloudreactor_task | to_json }}"
    body_format: json
    status_code:
      - 200
      - 201
  register: create_cloudreactor_task_result
  when: cloudreactor_enabled and deployed
  tags:
  - always

- name: Set saved_cloudreactor_task
  set_fact:
    saved_cloudreactor_task: "{{ create_cloudreactor_task_result.json }}"
  when: cloudreactor_enabled and deployed
  tags:
    - always

- name: Create ECS scheduled event definition {{task_name}}
  template: src=/home/appuser/work/templates/ecs_scheduled_event_definition.json.j2
            dest="{{ task_build_dir }}/ecs_scheduled_event_definition.json"
  when: (not cloudreactor_enabled) and deployed and (resolved_task_config.schedule is defined)
  tags: upload

- name: Create AWS events rule {{task_name}}
  command: "aws events put-rule --schedule-expression \"{{ resolved_task_config.schedule }})\" --name {{project_name}}-{{task_name}}-{{env}}"
  when: (not cloudreactor_enabled) and deployed and (resolved_task_config.schedule is defined)
  tags: upload

- name: Put AWS event target {{task_name}}
  command: "aws events put-targets --cli-input-json file://ecs_scheduled_event_definition.json"
  when: (not cloudreactor_enabled) and deployed and (resolved_task_config.schedule is defined)
  args:
    chdir: "{{ task_build_dir }}"
  tags: upload

- name: Create ECS service without load balancer
  ecs_service:
    state: present
    name: "{{project_name}}_{{task_name}}_{{env}}"
    cluster: "{{resolved_ecs.cluster_arn}}"
    region: "{{aws_region}}"
    launch_type: FARGATE
    force_new_deployment: "{{ resolved_ecs_service.force_new_deployment | default(false) }}"
    network_configuration:
      assign_public_ip: "{{ resolved_aws_network.assign_public_ip | default(false) }}"
      subnets: "{{ resolved_aws_network.subnets }}"
      security_groups: "{{ resolved_aws_network.security_groups }}"
    task_definition: "{{task_definition_family}}"
    desired_count: "{{ resolved_task_config.service_instance_count | default(1) }}"
    deployment_configuration:
      minimum_healthy_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).minimum_healthy_percent | default(0) }}"
      maximum_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).maximum_percent | default(100) }}"
    delay: "{{ resolved_ecs_service.delay | default(10) }}"
  when: (not cloudreactor_enabled) and deployed and (resolved_ecs_service.load_balancer_settings is not defined) and (resolved_task_config.is_service | default(resolved_task_config.service_instance_count | default(0) | string != '0'))
  tags:
    - always

- name: Create ECS service with load balancer
  ecs_service:
    state: present
    name: "{{project_name}}_{{task_name}}_{{env}}"
    cluster: "{{resolved_ecs.cluster_arn}}"
    region: "{{aws_region}}"
    launch_type: FARGATE
    force_new_deployment: "{{ resolved_ecs_service.force_new_deployment | default(false) }}"
    network_configuration:
      assign_public_ip: "{{ resolved_aws_network.assign_public_ip | default(false) }}"
      subnets: "{{ resolved_aws_network.subnets }}"
      security_groups: "{{ resolved_aws_network.security_groups }}"
    task_definition: "{{task_definition_family}}"
    desired_count: "{{ resolved_task_config.service_instance_count | default(1) }}"
    deployment_configuration:
      minimum_healthy_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).minimum_healthy_percent | default(100) }}"
      maximum_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).maximum_percent | default(200) }}"
    delay: "{{ resolved_ecs_service.delay | default(30) }}"
    # Note this only supports a single load balancer per Task.
    # If you use CloudReactor to manage Tasks, it does support multiple load
    # balancers.
    load_balancers:
      - targetGroupArn: "{{resolved_ecs_service.load_balancer_settings.load_balancers[0].target_group_arn}}"
        containerName:  "{{project_name}}_{{task_name}}_{{env}}"
        containerPort: "{{resolved_ecs_service.load_balancer_settings.load_balancers[0].container_port}}"
    health_check_grace_period_seconds: "{{ resolved_ecs_service.load_balancer_settings.health_check_grace_period_seconds | default(30) }}"
  when: (not cloudreactor_enabled) and deployed and (resolved_ecs_service.load_balancer_settings is defined) and (resolved_task_config.is_service | default(resolved_task_config.service_instance_count | default(0) | string != '0'))
  tags:
    - always

- name: Check if post-Task creation hook file exists
  stat:
    path: "{{deploy_config_dir}}/hooks/post_task_creation.yml"
  register: post_task_creation_hook_file_stat
  tags:
    - build

# Hook to perform steps after creating the Task in ECS and CloudReactor
- name: Post-Task creation hook
  include_tasks: "{{deploy_config_dir}}/hooks/post_task_creation.yml"
  when: deployed and post_task_creation_hook_file_stat.stat.exists
  tags:
    - always
