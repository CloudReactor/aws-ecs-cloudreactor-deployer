- name: Create task build directory {{item}}
  file:
    path: "{{task_build_dir}}"
    state: directory
  tags:
  - always

- name: Create ECS task definition file {{item}}
  template: src=templates/ecs_task_definition.json.j2
            dest={{task_build_dir}}/ecs_task_definition.json
            lstrip_blocks=yes
  tags:
  - always

- name: Register ECS task definition {{item}}
  command: "aws ecs register-task-definition --cli-input-json file://ecs_task_definition.json"
  args:
    chdir: "{{task_build_dir}}"
  register: register_ecs_task_result
  tags:
  - always

- name: Output Task Definition ARN
  debug:
    msg: "Task Definition ARN={{task_definition_arn}}"

- name: Create CloudReactor Task definition {{item}}
  template: src=templates/cloudreactor_task.yml.j2
            dest="{{task_build_dir}}/cloudreactor_task.yml"
            lstrip_blocks=yes
  tags:
  - always

- name: Read yaml
  include_vars:
    file: "{{task_build_dir}}/cloudreactor_task.yml"
    name: cloudreactor_task
  when: resolved_cloudreactor.enabled
  tags:
  - always

- name: Output CloudReactor Task definition JSON
  debug:
    msg: "{{ cloudreactor_task | to_json }}"
    verbosity: 2
  when: resolved_cloudreactor.enabled
  tags:
  - always

- name: Create/update task in CloudReactor
  uri:
    url: "{{ resolved_cloudreactor.api_base_url }}/api/v1/tasks/"
    method: POST
    headers:
      Authorization: "Token {{resolved_cloudreactor.deploy_api_key}}"
    return_content: yes
    body: "{{ cloudreactor_task | to_json }}"
    body_format: json
    status_code:
      - 200
      - 201
  register: create_cloudreactor_task_result
  when: resolved_cloudreactor.enabled
  tags:
  - always

- name: Create ECS scheduled event definition {{item}}
  template: src=templates/ecs_scheduled_event_definition.json.j2
            dest="{{ task_build_dir }}/ecs_scheduled_event_definition.json"
  when: (not resolved_cloudreactor.enabled) and (resolved_task.schedule is defined)
  tags: upload

- name: Create AWS events rule {{item}}
  command: "aws events put-rule --schedule-expression \"{{ resolved_task.schedule }})\" --name {{project_name}}-{{item}}-{{env}}"
  when: (not resolved_cloudreactor.enabled) and (resolved_task.schedule is defined)
  tags: upload

- name: Put AWS event target {{item}}
  command: "aws events put-targets --cli-input-json file://ecs_scheduled_event_definition.json"
  when: (not resolved_cloudreactor.enabled) and (resolved_task.schedule is defined)
  args:
    chdir: "{{ task_build_dir }}"
  tags: upload

- name: Create ECS service without load balancer
  ecs_service:
    state: present
    name: "{{project_name}}_{{item}}_{{env}}"
    cluster: "{{resolved_ecs.cluster_name}}"
    region: "{{aws_region}}"
    launch_type: FARGATE
    force_new_deployment: "{{ resolved_ecs_service.force_new_deployment | default(false) }}"
    network_configuration:
      assign_public_ip: "{{ resolved_ecs_task_network.assign_public_ip | default(false) }}"
      subnets: "{{ resolved_ecs_task_network.subnets }}"
      security_groups: "{{ resolved_ecs_task_network.security_groups }}"
    task_definition: "{{project_name}}_{{item}}_{{env}}"
    desired_count: "{{ resolved_task.service_instance_count | default(1) }}"
    deployment_configuration:
      minimum_healthy_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).minimum_healthy_percent | default(0) }}"
      maximum_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).maximum_percent | default(100) }}"
    delay: "{{ resolved_ecs_service.delay | default(10) }}"
  when: (not resolved_cloudreactor.enabled) and (resolved_ecs_service.load_balancers is not defined) and (resolved_task.is_service | default(resolved_task.service_instance_count | default(0) | string != '0'))
  tags:
    - always

- name: Create ECS service with load balancer
  ecs_service:
    state: present
    name: "{{project_name}}_{{item}}_{{env}}"
    cluster: "{{resolved_ecs.cluster_name}}"
    region: "{{aws_region}}"
    launch_type: FARGATE
    force_new_deployment: "{{ resolved_ecs_service.force_new_deployment | default(false) }}"
    network_configuration:
      assign_public_ip: "{{ resolved_ecs_task_network.assign_public_ip | default(false) }}"
      subnets: "{{ resolved_ecs_task_network.subnets }}"
      security_groups: "{{ resolved_ecs_task_network.security_groups }}"
    task_definition: "{{project_name}}_{{item}}_{{env}}"
    desired_count: "{{ resolved_task.service_instance_count | default(1) }}"
    deployment_configuration:
      minimum_healthy_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).minimum_healthy_percent | default(100) }}"
      maximum_percent: "{{ (resolved_ecs_service.deployment_configuration | default({})).maximum_percent | default(200) }}"
    delay: "{{ resolved_ecs_service.delay | default(30) }}"
    # Note this only supports a single load balancer per Task.
    # If you use CloudReactor to manage Tasks, it does support multiple load
    # balancers.
    load_balancers:
      - targetGroupArn: "{{resolved_ecs_service.load_balancers[0].target_group_arn}}"
        containerName:  "{{project_name}}_{{item}}_{{env}}"
        containerPort: "{{resolved_ecs_service.load_balancers[0].container_port}}"
    health_check_grace_period_seconds: "{{ resolved_ecs_service.health_check_grace_period_seconds | default(30) }}"
  when: (not resolved_cloudreactor.enabled) and (resolved_ecs_service.load_balancers is defined) and (resolved_task.is_service | default(resolved_task.service_instance_count | default(0) | string != '0'))
  tags:
    - always

  # Hook to perform steps before after building the Docker image,
  # but before creating the Task in ECS and CloudReactor
- include_tasks: deploy_config/hooks/post_task_creation.yml
  tags:
    - always
